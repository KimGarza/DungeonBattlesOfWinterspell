#include "EnemyGenerator.h"

std::vector<std::shared_ptr<Enemy>>  EnemyGenerator::GenerateActOneEnemies(int roomLevel) {

    std::vector<std::shared_ptr<Enemy>> enemies;

    enemies.push_back(std::make_shared<Enemy>("Firespitter",
        5, true, "Stealth", "Sneak through the shadows.", 2));

    enemies.push_back(std::make_shared<Enemy>("Dungeon Dweller",
        8, true, "Stealth", "Sneak through the shadows.", 4));

    enemies.push_back(std::make_shared<Enemy>("Goblin",
        5, true, "Stealth", "Sneak through the shadows.", 3));

    enemies.push_back(std::make_shared<Enemy>("HauntingSpirit",
        12, true, "Stealth", "Sneak through the shadows.", 7));

    enemies.push_back(std::make_shared<Enemy>("Troll",
        45, true, "Stealth", "Sneak through the shadows.", 19));

    enemies.push_back(std::make_shared<Enemy>("Skeleton",
        11, true, "Stealth", "Sneak through the shadows.", 5));

    enemies.push_back(std::make_shared<Enemy>("Undead Wolf",
        24, true, "Stealth", "Sneak through the shadows.", 12));

    // Gets random number between the min/max which are decided based upon what the room levels are. Represents how many enemies can spawn per room. (Maximum & minimum values inclusive).
    std::random_device rand; /**/ std::mt19937 gen(rand()); /**/ int min_value = 0; /**/ int max_value = 0;

    //if (roomLevel < 3) {
        //min_value = 2; max_value = 4;
    min_value = 1; max_value = 1;
    //} else if (roomLevel < 5) {
    //    //min_value = 3; max_value = 6;
    //    min_value = 1; max_value = 1;

    //} else {
    //    //min_value = 4; max_value = 7;
    //    min_value = 1; max_value = 1;

    //}

    std::uniform_int_distribution<int> distribution(min_value, max_value);

    int random_number = distribution(gen); // random_number is how many enemies can spawn per room


    std::vector<std::shared_ptr<Enemy>> enemiesInRoom; /**/ int randomIndex = 0;

    for (int i = 0; i < random_number; i++) {

        //if (roomLevel < 3) {
        int lowLevel = (enemies.size() + 3) / 4; // Adding 3 before dividing by 4 effectively rounds up
        randomIndex = std::rand() % lowLevel; // truncates 
        // The expression std::rand() % enemies.size() computes the remainder when the random number generated by std::rand() is divided by the number of elements in the enemies vector.
        // The remainder will always be in the range 0 to enemies.size() - 1. This is because the remainder of any division operation is always less than the divisor.

    //} else if (roomLevel < 5) {
    //    int medLevel = (enemies.size() + 3) / 2;
    //    randomIndex = std::rand() % medLevel;
    //} else {
    //    randomIndex = std::rand() % enemies.size();
    //}

        std::shared_ptr<Enemy> randomEnemy = enemies[randomIndex];

        enemiesInRoom.push_back(randomEnemy);
    }

    return enemiesInRoom;
}


std::vector<std::shared_ptr<Enemy>> EnemyGenerator::GenerateActThreeEnemies(int roomLevel) {

    std::vector<std::shared_ptr<Enemy>> enemies;

    enemies.push_back(std::make_shared<Enemy>("Firespitter",
        5, true, "Stealth", "Sneak through the shadows.", 2));

    enemies.push_back(std::make_shared<Enemy>("Dungeon Dweller",
        8, true, "Stealth", "Sneak through the shadows.", 4));

    enemies.push_back(std::make_shared<Enemy>("Goblin",
        5, true, "Stealth", "Sneak through the shadows.", 3));

    enemies.push_back(std::make_shared<Enemy>("HauntingSpirit",
        12, true, "Stealth", "Sneak through the shadows.", 7));

    enemies.push_back(std::make_shared<Enemy>("Troll",
        45, true, "Stealth", "Sneak through the shadows.", 19));

    enemies.push_back(std::make_shared<Enemy>("Skeleton",
        11, true, "Stealth", "Sneak through the shadows.", 5));

    enemies.push_back(std::make_shared<Enemy>("Undead Wolf",
        24, true, "Stealth", "Sneak through the shadows.", 12));

    // Gets random number between the min/max which are decided based upon what the room levels are. Represents how many enemies can spawn per room. (Maximum & minimum values inclusive).
    std::random_device rand; /**/ std::mt19937 gen(rand()); /**/ int min_value = 0; /**/ int max_value = 0;

    //if (roomLevel < 3) {
        //min_value = 2; max_value = 4;
    min_value = 1; max_value = 1;
    //} else if (roomLevel < 5) {
    //    //min_value = 3; max_value = 6;
    //    min_value = 1; max_value = 1;

    //} else {
    //    //min_value = 4; max_value = 7;
    //    min_value = 1; max_value = 1;

    //}

    std::uniform_int_distribution<int> distribution(min_value, max_value);

    int random_number = distribution(gen); // random_number is how many enemies can spawn per room


    std::vector<std::shared_ptr<Enemy>> enemiesInRoom; /**/ int randomIndex = 0;

    for (int i = 0; i < random_number; i++) {

        //if (roomLevel < 3) {
        int lowLevel = (enemies.size() + 3) / 4; // Adding 3 before dividing by 4 effectively rounds up
        randomIndex = std::rand() % lowLevel; // truncates 
        // The expression std::rand() % enemies.size() computes the remainder when the random number generated by std::rand() is divided by the number of elements in the enemies vector.
        // The remainder will always be in the range 0 to enemies.size() - 1. This is because the remainder of any division operation is always less than the divisor.

    //} else if (roomLevel < 5) {
    //    int medLevel = (enemies.size() + 3) / 2;
    //    randomIndex = std::rand() % medLevel;
    //} else {
    //    randomIndex = std::rand() % enemies.size();
    //}

        std::shared_ptr<Enemy> randomEnemy = enemies[randomIndex];

        enemiesInRoom.push_back(randomEnemy);
    }

    return enemiesInRoom;
}